<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>North</title>
  
  
  <link href="http://north2020.xyz/atom.xml" rel="self"/>
  
  <link href="http://north2020.xyz/"/>
  <updated>2020-10-05T09:13:16.098Z</updated>
  <id>http://north2020.xyz/</id>
  
  <author>
    <name>North31</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git基础学习</title>
    <link href="http://north2020.xyz/2020/10/01/git%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://north2020.xyz/2020/10/01/git%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-10-01T08:38:52.000Z</published>
    <updated>2020-10-05T09:13:16.098Z</updated>
    
    <content type="html"><![CDATA[<p>Git是分布式版本控制系统，用来管理文件的修改。Linus在1991年创建了开源的Linux,为了更好地管理Linux，Linus花了两周的时间自己用C写了一个分布式版本控制系统，就是Git！本文是本人初学git的总结，主要为git命令介绍。</p><a id="more"></a><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>初始化一个Git仓库，使用<code>git init</code>命令。<br>添加文件到Git仓库，分两步：  </p><ol><li>使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件。</li><li>使用命令<code>git commit -m &quot;提交说明&quot;</code>，完成。<h2 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h2><h3 id="工作区状态"><a href="#工作区状态" class="headerlink" title="工作区状态"></a>工作区状态</h3></li></ol><ul><li>要随时掌握工作区的状态，使用<code>git status</code>命令。</li><li>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。<h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3></li><li><code>HEAD</code>指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</li><li>穿梭前，用<code>git log --pretty=oneline</code>可以查看提交历史。</li><li>要重返未来，用<code>git reflog</code>查看命令历史。<h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3></li><li>场景1：当改乱了工作区某个文件的内容，想直接丢弃工作区的修改，用命令<code>git checkout -- file</code>。</li><li>场景2：不仅改乱了工作区某个文件的内容，还添加到暂存区，想丢弃修改，分两步，第一步用命令<code>git reset HEAD file</code>，就回到场景1，第二步按场景1操作。</li><li>已经提交了不合适的修改到版本库，想要撤销本次操作，参考<code>版本回退</code>步骤。<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3>手动删除提交过的文件后，工作区和版本库不一致，使用<code>git rm file</code>来从版本库中删除该文件，并用<code>git commit -m &quot;&quot;</code>来提交删除操作。<h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2></li></ul><ol><li><p>创建SSH Key。打开Git Bash，创建SSH Key：</p><p> ssh-keygen -t rsa -C “<a href="mailto:&#x79;&#x6f;&#x75;&#114;&#x65;&#x6d;&#97;&#x69;&#x6c;&#x40;&#101;&#x78;&#97;&#x6d;&#112;&#108;&#101;&#46;&#x63;&#111;&#109;">&#x79;&#x6f;&#x75;&#114;&#x65;&#x6d;&#97;&#x69;&#x6c;&#x40;&#101;&#x78;&#97;&#x6d;&#112;&#108;&#101;&#46;&#x63;&#111;&#109;</a>“<br>在用户主目录里找到<code>.ssh</code>目录，里面有<code>id_rsa</code>私钥和<code>id_rsa.pub</code>公钥两个文件。</p></li><li><p>登录Github，打开“Account settings”,”SSH Keys”页面，点击“Add SSH Key”，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容。</p><h3 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h3></li></ol><ul><li>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/reponame.git</code>。</li><li>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容。</li><li>此后，可以用<code>git push origin master</code>推送最新修改。<h3 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h3><code>git clone</code>命令，支持<code>https</code>、<code>ssh</code>协议。<br><code>git clone git@github.com:yourname/reponame.git</code><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="创建和合并分支"><a href="#创建和合并分支" class="headerlink" title="创建和合并分支"></a>创建和合并分支</h3></li><li>查看分支：<code>git branch</code></li><li>创建分支：<code>git branch &lt;name&gt;</code></li><li>切换分支：<code>git switch &lt;name&gt;</code></li><li>创建加切换分支：<code>git switch -c &lt;name&gt;</code></li><li>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></li><li>删除分支：<code>git branch -d &lt;name&gt;</code><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3>当Git无法自动合并时，必须首先解决冲突，再提交，合并完成。<br>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。<br>用<code>git log --graph --pretty=oneline --abbrev-commit</code>可以看到分支合并图<h3 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h3>通常，合并分支时，Git会用到<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢失掉分支信息。如果强制禁用<code>Fast forward</code>模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。<br><code>git merge --no-ff -m &quot;merge with --no-ff&quot; branchname</code><h3 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h3>在dev分支工作，当手头工作没做完时，先把工作现场<code>git stash</code>一下，然后回到master,创建分支区修复bug，修复后,合并到master,再回到dev分支，用<code>git stash pop</code>，回到工作现场。想要将修复的bug合并到当前的dev分支，可以用<code>git cherry-pick &lt;commit&gt;</code>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。<h3 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h3>开发一个新的feature，最好新建一个分支；<br>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除。<h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h3></li><li>查看远程库信息，使用<code>git remote -v</code>；</li><li>从本地推送分支，使用<code>git push origin branch-name</code>，如果存在冲突，推送失败，先用<code>git pull</code>抓取远程的新提交，若失败，原因是没有指定本地<code>dev</code>分支与远程<code>origin/dev</code>分支的链接，根据提示设置链接：<code>git branch --set-upstream-to=origin/dev dev</code>，再<code>git pull</code>，手动处理冲突，再提交，推送远程。<h3 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h3></li><li><code>git rebase</code>操作可以把本地未push的分叉提交历史整理直线；</li><li>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。<h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3>标签直接打，不用commit</li><li><code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit—id:<code>git tag &lt;tagname&gt; commit_id</code>；</li><li><code>git tag -a &lt;tagname&gt; -m &quot;blabala&quot; commit_id</code>可以指定标签信息；</li><li><code>git tag</code>可以查看所有标签；</li><li><code>git show &lt;tagname&gt;</code>可以查看标签信息。<h3 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h3>创建的标签都只存储在本地，不会自动推送到远程。  </li><li><code>git push origin &lt;tagname&gt;</code>：推送一个本地标签；</li><li><code>git push origin --tags</code>：推送全部未推送过的本地标签；</li><li><code>git tag -d &lt;tagname&gt;</code>：删除一个本地标签；</li><li><code>git push origin :refs/tags/&lt;tagename&gt;</code>：删除一个远程标签。<h2 id="自定义Git"><a href="#自定义Git" class="headerlink" title="自定义Git"></a>自定义Git</h2><h3 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h3></li><li>忽略某些文件时，需要编写<code>.gitignore</code>；</li><li><code>.gitignore</code>文件本身要放到版本库里，并且可以对<code>.gitignore</code>做版本管理。</li><li>若想添加的文件被忽略，在不改变<code>.gitignore</code>的前提下，可以用<code>-f</code>强制添加：<code>git add -f app.class</code>;</li><li>也可以在<code>gitignore</code>中查找忽略命令：<code>git check-ignore -v app.class</code>，找到语句，修改规则。<h3 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h3></li><li><code>git config --global alias.newname oldname</code><br>global表示这些改动对这台电脑上的所有git仓库都适用。</li><li>不加global的配置文件在<code>.git/config</code>中，加global的配置文件在用户主目录下的一个隐藏文件<code>,gitconfig</code>中。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Git是分布式版本控制系统，用来管理文件的修改。Linus在1991年创建了开源的Linux,为了更好地管理Linux，Linus花了两周的时间自己用C写了一个分布式版本控制系统，就是Git！本文是本人初学git的总结，主要为git命令介绍。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Markdown基础学习</title>
    <link href="http://north2020.xyz/2020/10/01/Markdown%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://north2020.xyz/2020/10/01/Markdown%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-10-01T07:28:13.000Z</published>
    <updated>2020-10-01T08:08:59.783Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要是本人学习Markdown的相关记录，方便快速了解Markdown基础语句。</p><a id="more"></a><h2 id="Markdown标题"><a href="#Markdown标题" class="headerlink" title="Markdown标题"></a>Markdown标题</h2><p>用#可以表示1-6级标题，一级标题对应一个#，二级标题对应两个#号，以此类推。</p><pre><code># 一级标题  </code></pre><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><pre><code>## 二级标题</code></pre><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><hr><h2 id="Markdown段落"><a href="#Markdown段落" class="headerlink" title="Markdown段落"></a>Markdown段落</h2><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>Markdown可以使用以下几种字体： </p><pre><code>\*斜体文本\*  \*\*粗体文本\*\*  \*\*\*粗斜体文本\*\*\*  </code></pre><p>显示效果如下：</p><p><em>斜体文本</em><br><strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong></p><h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>可以在一行内用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他的东西。 </p><pre><code>********  </code></pre><p>显示效果如下：</p><hr><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><pre><code>~~删除~~</code></pre><p>显示效果如下：</p><p><del>删除</del></p><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>下划线可以通过HTML的&lt;u&gt;标签来实现：</p><pre><code>\&lt;u&gt;带下划线文本\&lt;/u&gt;  </code></pre><p>显示效果如下：</p><p><u>带下划线文本</u></p><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>创建脚注格式类似这样：</p><pre><code>[^RUNOOB]。[^RUNOOB]:我的脚注。 </code></pre><p>显示效果如下：</p><p><a href="%E6%88%91%E7%9A%84%E8%84%9A%E6%B3%A8%E3%80%82">^RUNOOB</a>。</p><hr><h2 id="Markdown列表"><a href="#Markdown列表" class="headerlink" title="Markdown列表"></a>Markdown列表</h2><pre><code>* 第一项 * 第二项 * 第三项  1. 第一项2. 第二项</code></pre><p>显示效果如下：</p><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ol><li>第一项</li><li>第二项</li></ol><hr><h2 id="Markdown区块"><a href="#Markdown区块" class="headerlink" title="Markdown区块"></a>Markdown区块</h2><pre><code>&gt;区块中使用列表&gt;1. first&gt;2. second&gt;* first&gt;* second* first    &gt;rookie teach      &gt;learn dream* second</code></pre><p>显示效果如下：</p><blockquote><p>区块中使用列表</p><ol><li>first</li><li>second</li></ol><ul><li>first</li><li>second</li></ul></blockquote><ul><li>first<blockquote><p>rookie teach<br>learn dream</p></blockquote></li><li>second</li></ul><hr><h2 id="Markdown代码"><a href="#Markdown代码" class="headerlink" title="Markdown代码"></a>Markdown代码</h2><pre><code>`printf()` 函数      &lt;?php      echo &#39;RUNOOB&#39;;      function test() &#123;          echo &#39;test&#39;      &#125;</code></pre><p>显示效果如下：  </p><p><code>printf()</code> 函数 </p><pre><code>&lt;?php  echo &#39;RUNOOB&#39;;  function test() &#123;      echo &#39;test&#39;  &#125;</code></pre><p>也可以用```包裹一段代码  </p><hr><h2 id="Markdown链接"><a href="#Markdown链接" class="headerlink" title="Markdown链接"></a>Markdown链接</h2><pre><code>这是一个链接[我的博客](https://www.north2020.xyz)</code></pre><p>这是一个链接<a href="https://www.north2020.xyz/">我的博客</a></p><hr><h2 id="Markdown图片"><a href="#Markdown图片" class="headerlink" title="Markdown图片"></a>Markdown图片</h2><pre><code>![一只猫咪](http://i1.fuimg.com/727705/abc4d5d245ef0c3c.jpg)</code></pre><p><img src="http://i1.fuimg.com/727705/abc4d5d245ef0c3c.jpg" alt="一只猫咪"></p><hr><h2 id="Markdown表格"><a href="#Markdown表格" class="headerlink" title="Markdown表格"></a>Markdown表格</h2><pre><code>|左对齐|右对齐|居中对其||:---- | ----:|:-----:||单元格|单元格|单元格||单元格|单元格|单元格|</code></pre><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对其</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要是本人学习Markdown的相关记录，方便快速了解Markdown基础语句。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://north2020.xyz/2020/09/28/hello-world/"/>
    <id>http://north2020.xyz/2020/09/28/hello-world/</id>
    <published>2020-09-28T00:45:20.209Z</published>
    <updated>2020-10-01T07:56:06.434Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
